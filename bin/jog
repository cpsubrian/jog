#!/usr/bin/env node

var program = require('commander')
  , util = require('util')
  , ms = require('ms')
  , jog = require('..');

// map functions

var maps = [];

// filter functions

var selects = [];

// reduce function

var reduce;

// --map

program.on('map', function(val){
  if (/^[a-z\d.]+$/i.test(val)) val = '_.' + val;
  maps.push(new Function('_', 'return ' + val));
});

// --level

program.on('level', function(val){
  selects.push(new Function('_', 'return _.level == "' + val + '"'));
});

// --type

program.on('type', function(val){
  selects.push(new Function('_', 'return _.type == "' + val + '"'));
});

// --select

program.on('select', function(val){
  if (/^[a-z\d.]+$/i.test(val)) val = '_.' + val;
  selects.push(new Function('_', 'return ' + val));
});

// examples

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # filter slow queries');
  console.log('    $ jog --file query.log --select "_.duration > 300');
  console.log();
  console.log('    # total query durations');
  console.log('    $ jog --file query.log --map _.duration --reduce "$ + _"');
  console.log();
});

program
  .version(jog.version)
  .option('-w, --within <ms>', 'filter events to within the given <ms>', ms)
  .option('-t, --type <name>', 'filter using the given type <name>')
  .option('-l, --level <name>', 'filter using the given level <name>')
  .option('-f, --ignore-eof', 'do not stop on EOF')
  .option('-F, --file <path>', 'load from the given <path>')
  .option('-R, --redis', 'load from redis store')
  .option('-s, --select <fn>', 'use the given <fn> for filtering')
  .option('-m, --map <fn>', 'use the given <fn> for mapping')
  .option('-r, --reduce <fn>', 'use the given <fn> for reducing')
  .option('-o, --output <name>', 'use the <name> output formatter')
  .option('-c, --color', 'color the output (shortcut for --output color')
  .option('-j, --json', 'output JSON (shortcut for --output json)')
  .parse(process.argv);

// determine store

var store = program.file
  ? new jog.FileStore(program.file)
  : program.redis
    ? new jog.RedisStore
    : null;

// no store

if (!store) throw new Error('store required, use --file or --redis');

// -f

var ignoreEOF = program.ignoreEof;

// --within

if (program.within) {
  selects.push(new Function('_', 'return Date.now() - _.timestamp <= ' + program.within));
}

// --reduce

if (program.reduce) {
  reduce = new Function('$, _', 'return ' + program.reduce);
}

// --output

var formatters = jog.formatters()
  , formatter;

if (program.output) {
  formatter = formatters[program.output];
  if (!formatter) {
    throw new Error('no formatter found for ' + program.output);
  }
} else if (program.json) {
  formatter = formatters.json;
} else if (program.color) {
  formatter = formatters.color;
} else {
  formatter = formatters.default;
}

if (formatter) {
  if (!formatter.output) {
    throw new Error('invalid output formatter ' + program.output);
  }
  if (formatter.map) {
    maps.push(formatter.map);
  }
  if (formatter.select) {
    selects.push(formatter.select);
  }
  if (formatter.reduce) {
    reduce = formatter.reduce;
  }
}

// setup

var log = jog(store)
  , stream = log.stream({ end: !ignoreEOF })
  , results = []
  , prop;

// stream data

stream.on('data', function(line){
  var ret;

  // select
  if (selects.length) {
    ret = line;
    for (var i = 0, len = selects.length; i < len; ++i) {
      if (!selects[i](line)) {
        ret = undefined;
        break;
      }
    }
  } else {
    ret = line;
  }

  // map
  if (undefined === ret) return;
  for (var i = 0, len = maps.length; i < len; ++i) {
    ret = maps[i](ret);
  }

  if (ignoreEOF) {
    formatter.output([ret]);
  } else {
    results.push(ret);
  }
});

// output results

stream.on('end', function(){
  if (ignoreEOF) return;
  if (reduce) results = results.reduce(reduce);
  formatter.output(results);
});
